1.  (User)
      |
      | uploads image (JPEG, PNG)
      v
2. Your Backend API Endpoint
      |
      | a. Receives the image file
      | b. Uploads image to Cloud Storage (S3, GCS)
      | c. Gets a public or pre-signed URL for the image
      +-------------------------------------------------+
      |                                                 |
      v                                                 v
3. Send to                                        4. Send to Embedding Model
   (Gemini)                                          (Vertex AI)
      |                                                 |
      | - Pass the image URL + a text prompt            | - Pass the image URL
      | - Receives a text description/analysis          | - Receives a vector embedding [0.1, 0.9, ...]
      v                                                 v
5. Your ApplicationLogic                           6. Your Vector Database
   ()                                                  (save embedding for search)


"""
The App starts like this when a user send an image with query the backend receives the image file.
next uploads image to Cloud Storage.
gets URL for the image
send the url to gemini to see and extract description from the image 
send the url to the search tool to make the embedding with vertex multimodal embedding 


"""




"""


Function call: { id=None args={'a': 57, 'b': 44} name='multiply' }
Function response: { id=None name='multiply' response={'result': 2508} }

"""
2.

"""

Function call: { id=None args={'location': 'Mountain View, CA', 'description': 'comedy'} name='find_movies' }
--------------------------------------------------------------------------------
user:
Function response: { id=None name='find_movies' response={'result': ['Barbie', 'Oppenheimer']} }
--------------------------------------------------------------------------------
model:
Function call: { id=None args={'location': 'Mountain View, CA', 'movie': 'Barbie'} name='find_theaters' }
Function call: { id=None args={'movie': 'Oppenheimer', 'location': 'Mountain View, CA'} name='find_theaters' }
--------------------------------------------------------------------------------
user:
Function response: { id=None name='find_theaters' response={'result': ['Googleplex 16', 'Android Theatre']} }
Function response: { id=None name='find_theaters' response={'result': ['Googleplex 16', 'Android Theatre']} }

"""
3. 
---------
model:
Function call: { id=None args={'date': '01/01/2025', 'location': 'Mountain View, CA', 'movie': 'Barbie', 'theater': 'Googleplex 16'} name='get_showtimes' }
Function call: { id=None args={'theater': 'Android Theatre', 'date': '01/01/2025', 'location': 'Mountain View, CA', 'movie': 'Barbie'} name='get_showtimes' }
Function call: { id=None args={'theater': 'Googleplex 16', 'movie': 'Oppenheimer', 'date': '01/01/2025', 'location': 'Mountain View, CA'} name='get_showtimes' }
Function call: { id=None args={'theater': 'Android Theatre', 'location': 'Mountain View, CA', 'movie': 'Oppenheimer', 'date': '01/01/2025'} name='get_showtimes' }

=============

{
  "reasoning": "User wants return info AND product recommendations",
  "FunctionCall": [
    {
      "name": "search_faqs",
      "args": {
        "text": "return policy"
      }
    },
    {
      "name": "search_products",
      "args": {
        "text": "office desk modern style",
        "image": false,
        "image_url": [],
        "filters": {
          "category": "Office Furniture",
          "price_range": {"min": 0, "max": 500, "operation": "lt"},
          "attributes": {"color": null}
        }
      }
    }
  ]
}